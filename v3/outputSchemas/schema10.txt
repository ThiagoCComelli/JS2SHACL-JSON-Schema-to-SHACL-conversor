
ex:nonEmptyString_Shape a sh:NodeShape;
  sh:targetClass :nonEmptyString;
  sh:property [
    sh:path nonEmptyString;
    sh:datatype string;
    sh:minLength 1;
  ];

ex:platform_Shape a sh:NodeShape;
  sh:targetClass :platform;
  sh:property [
    sh:path os;
    sh:datatype string;
    sh:in (linux,windows,darwin,freebsd,netbsd,openbsd,dragonfly,solaris);
  ];
  sh:property [
    sh:path arсh;
    sh:datatype string;
    sh:in (arm,arm64,amd64,386);
  ];
  sh:property [
    sh:path variant;
    sh:datatype string;
  ];
  sh:property [
    sh:path version;
    sh:datatype string;
  ];

ex:commands_Shape a sh:NodeShape;
  sh:targetClass :commands;
  sh:property [
    sh:path ex:commands;
    sh:node dash:ListShape;
    sh:property [
      sh:path ([sh:zeroOrMorePath redf:rest] ref:first);
      sh:datatype nonEmptyString_Shape;
    ];
  ];

ex:environment_Shape a sh:NodeShape;
  sh:targetClass :environment;

ex:condition_Shape a sh:NodeShape;
  sh:targetClass :condition;
  sh:property [
    sh:path ex:condition;
    sh:node dash:ListShape;
    sh:property [
      sh:path ([sh:zeroOrMorePath redf:rest] ref:first);
      sh:datatype string;
    ];
  ];

ex:conditions_Shape a sh:NodeShape;
  sh:targetClass :conditions;

ex:allConditions_Shape a sh:NodeShape;
  sh:targetClass :allConditions;
  sh:property [
    sh:path branch;
    sh:node conditions_Shape;
  ];
  sh:property [
    sh:path event;
    sh:node conditions_Shape;
  ];
  sh:property [
    sh:path ref;
    sh:node conditions_Shape;
  ];
  sh:property [
    sh:path repo;
    sh:node conditions_Shape;
  ];
  sh:property [
    sh:path status;
    sh:node condition_Shape;
  ];
  sh:property [
    sh:path target;
    sh:node condition_Shape;
  ];

ex:volumes_Shape a sh:NodeShape;
  sh:targetClass :volumes;
  sh:property [
    sh:path ex:volumes;
    sh:node dash:ListShape;
    sh:property [
      sh:path ([sh:zeroOrMorePath redf:rest] ref:first);
      sh:datatype volumes1_Shape;
    ];
  ];

ex:services_Shape a sh:NodeShape;
  sh:targetClass :services;
  sh:property [
    sh:path ex:services;
    sh:node dash:ListShape;
    sh:property [
      sh:path ([sh:zeroOrMorePath redf:rest] ref:first);
      sh:datatype services1_Shape;
    ];
  ];

ex:secret_Shape a sh:NodeShape;
  sh:targetClass :secret;
  sh:property [
    sh:path from_secret;
    sh:datatype string;
    sh:minCount 1;
  ];

ex:stringOrSecret_Shape a sh:NodeShape;
  sh:targetClass :stringOrSecret;

ex:node_Shape a sh:NodeShape;
  sh:targetClass :node;

ex:kind_signature_Shape a sh:NodeShape;
  sh:targetClass :kind_signature;
  sh:property [
    sh:path hmac;
    sh:datatype string;
    sh:minLength 40;
    sh:maxLength 40;
    sh:minCount 1;
  ];

ex:kind_secret_Shape a sh:NodeShape;
  sh:targetClass :kind_secret;
  sh:property [
    sh:path name;
    sh:node nonEmptyString_Shape;
    sh:minCount 1;
  ];
  sh:property [
    sh:path data;
    sh:datatype string;
  ];
  sh:property [
    sh:path get;
    sh:node get_Shape;
    sh:minCount 1;
  ];

ex:kind_pipeline_Shape a sh:NodeShape;
  sh:targetClass :kind_pipeline;
  sh:property [
    sh:path name;
    sh:node nonEmptyString_Shape;
    sh:minCount 1;
  ];
  sh:property [
    sh:path platform;
    sh:node platform_Shape;
  ];
  sh:property [
    sh:path workspace;
    sh:datatype string;
  ];
  sh:property [
    sh:path clone;
    sh:node clone_Shape;
  ];
  sh:property [
    sh:path ex:steps;
    sh:node dash:ListShape;
    sh:property [
      sh:path ([sh:zeroOrMorePath redf:rest] ref:first);
    ];
  ];
  sh:property [
    sh:path trigger;
    sh:node allConditions_Shape;
  ];

ex:pipeline_docker_Shape a sh:NodeShape;
  sh:targetClass :pipeline_docker;
  sh:property [
    sh:path volumes;
    sh:node volumes_Shape;
  ];
  sh:property [
    sh:path services;
    sh:node services_Shape;
  ];
  sh:property [
    sh:path ex:image_pull_secrets;
    sh:node dash:ListShape;
    sh:property [
      sh:path ([sh:zeroOrMorePath redf:rest] ref:first);
      sh:datatype string;
    ];
  ];
  sh:property [
    sh:path node;
    sh:node node_Shape;
  ];

ex:pipeline_kubernetes_Shape a sh:NodeShape;
  sh:targetClass :pipeline_kubernetes;
  sh:property [
    sh:path metadata;
    sh:node kubernetesjsonschema.dev_Shape;
  ];
  sh:property [
    sh:path ex:tolerations;
    sh:node dash:ListShape;
    sh:property [
      sh:path ([sh:zeroOrMorePath redf:rest] ref:first);
      sh:datatype kubernetesjsonschema.dev_Shape;
    ];
  ];
  sh:property [
    sh:path ex:node_selector;
    sh:node dash:ListShape;
    sh:property [
      sh:path ([sh:zeroOrMorePath redf:rest] ref:first);
      sh:datatype kubernetesjsonschema.dev_Shape;
    ];
  ];
  sh:property [
    sh:path volumes;
    sh:node volumes_Shape;
  ];
  sh:property [
    sh:path services;
    sh:node services_Shape;
  ];
  sh:property [
    sh:path ex:image_pull_secrets;
    sh:node dash:ListShape;
    sh:property [
      sh:path ([sh:zeroOrMorePath redf:rest] ref:first);
      sh:datatype string;
    ];
  ];

ex:pipeline_exec_Shape a sh:NodeShape;
  sh:targetClass :pipeline_exec;
  sh:property [
    sh:path node;
    sh:node node_Shape;
  ];

ex:pipeline_ssh_Shape a sh:NodeShape;
  sh:targetClass :pipeline_ssh;

ex:pipeline_digitalocean_Shape a sh:NodeShape;
  sh:targetClass :pipeline_digitalocean;
  sh:property [
    sh:path token;
    sh:node stringOrSecret_Shape;
    sh:minCount 1;
  ];

ex:pipeline_macstadium_Shape a sh:NodeShape;
  sh:targetClass :pipeline_macstadium;

ex:step_Shape a sh:NodeShape;
  sh:targetClass :step;
  sh:property [
    sh:path name;
    sh:node nonEmptyString_Shape;
    sh:minCount 1;
  ];
  sh:property [
    sh:path failure;
    sh:datatype string;
    sh:in (always,ignore);
  ];
  sh:property [
    sh:path commands;
    sh:node commands_Shape;
  ];
  sh:property [
    sh:path detach;
    sh:datatype boolean;
  ];
  sh:property [
    sh:path environment;
    sh:node environment_Shape;
  ];
  sh:property [
    sh:path when;
    sh:node allConditions_Shape;
  ];
  sh:property [
    sh:path ex:depends_on;
    sh:node dash:ListShape;
    sh:property [
      sh:path ([sh:zeroOrMorePath redf:rest] ref:first);
      sh:datatype nonEmptyString_Shape;
    ];
  ];

ex:step_docker_Shape a sh:NodeShape;
  sh:targetClass :step_docker;

ex:step_kubernetes_Shape a sh:NodeShape;
  sh:targetClass :step_kubernetes;

ex:step_exec_Shape a sh:NodeShape;
  sh:targetClass :step_exec;

ex:step_ssh_Shape a sh:NodeShape;
  sh:targetClass :step_ssh;

ex:step_digitalocean_Shape a sh:NodeShape;
  sh:targetClass :step_digitalocean;

ex:step_macstadium_Shape a sh:NodeShape;
  sh:targetClass :step_macstadium;

ex:steps_volumes_Shape a sh:NodeShape;
  sh:targetClass :steps_volumes;
  sh:property [
    sh:path ex:steps_volumes;
    sh:node dash:ListShape;
    sh:property [
      sh:path ([sh:zeroOrMorePath redf:rest] ref:first);
      sh:datatype steps_volumes1_Shape;
    ];
  ];

ex:JS_id a sh:NodeShape;
  sh:targetClass :JS_id;

ex:volumes1_Shape a sh:NodeShape;
  sh:targetClass :volumes1;
  sh:property [
    sh:path name;
    sh:node nonEmptyString_Shape;
  ];
  sh:property [
    sh:path host;
    sh:node host_Shape;
  ];
  sh:property [
    sh:path temp;
    sh:node temp_Shape;
  ];

ex:services1_Shape a sh:NodeShape;
  sh:targetClass :services1;
  sh:property [
    sh:path name;
    sh:node nonEmptyString_Shape;
    sh:minCount 1;
  ];
  sh:property [
    sh:path image;
    sh:node nonEmptyString_Shape;
    sh:minCount 1;
  ];
  sh:property [
    sh:path command;
    sh:node commands_Shape;
  ];
  sh:property [
    sh:path entrypoint;
    sh:node commands_Shape;
  ];
  sh:property [
    sh:path environment;
    sh:node environment_Shape;
  ];
  sh:property [
    sh:path privileged;
    sh:datatype boolean;
  ];
  sh:property [
    sh:path volumes;
    sh:node volumes_Shape;
  ];
  sh:property [
    sh:path working_dir;
    sh:node nonEmptyString_Shape;
  ];

ex:get_Shape a sh:NodeShape;
  sh:targetClass :get;
  sh:property [
    sh:path path;
    sh:node nonEmptyString_Shape;
    sh:minCount 1;
  ];
  sh:property [
    sh:path name;
    sh:node nonEmptyString_Shape;
    sh:minCount 1;
  ];

ex:clone_Shape a sh:NodeShape;
  sh:targetClass :clone;
  sh:property [
    sh:path depth;
    sh:datatype decimal;
  ];

ex:steps_volumes1_Shape a sh:NodeShape;
  sh:targetClass :steps_volumes1;
  sh:property [
    sh:path name;
    sh:node nonEmptyString_Shape;
    sh:minCount 1;
  ];
  sh:property [
    sh:path path;
    sh:node nonEmptyString_Shape;
    sh:minCount 1;
  ];

ex:host_Shape a sh:NodeShape;
  sh:targetClass :host;
  sh:property [
    sh:path path;
    sh:node nonEmptyString_Shape;
  ];

ex:temp_Shape a sh:NodeShape;
  sh:targetClass :temp;
